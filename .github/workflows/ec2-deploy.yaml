name: Deploy to EC2

on:
  push:
    branches:
      - "1.x"
      - "development"

  workflow_dispatch:

jobs:
  deploy-to-ec2:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Copy folder content recursively to remote VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_SSH_KEY }}
          source: .
          target: ${{ secrets.AWS_EC2_TARGET_DIR }}

  update-docker-swarm-service:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2
    environment: ${{ github.ref_name }}
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_PRIVATE_SSH_KEY }}
          script: |
            cd ${{ secrets.AWS_EC2_TARGET_DIR }}

            # Ensure Swarm is initialized
            docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') || true

            # Create Swarm Network if it doesn't exist
            docker network ls | grep kanvas_docker_swarm_network || docker network create --driver overlay kanvas_docker_swarm_network

            # Deploy with Swarm
            docker stack deploy -c docker-compose.${{ github.ref_name }}.yml kanvas-niche-api
            
            # Wait for services to start
            sleep 10

            # Install dependencies inside Laravel container
            docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) composer install --optimize-autoloader

            # Clear and cache Laravel configurations
            docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan lighthouse:cache
            docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan lighthouse:clear-cache all
            docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan config:cache
            
            # Reload Octane
            docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan octane:reload

            # Force update of all services to apply changes smoothly
            docker service update --force kanvas-niche-api_queue-social
            docker service update --force kanvas-niche-api_queue
            docker service update --force kanvas-niche-api_laravel-scheduler
            docker service update --force kanvas-niche-api_batch-logger-queue
            docker service update --force kanvas-niche-api_queue-user-interactions
            docker service update --force kanvas-niche-api_queue-scout-worker
            docker service update --force kanvas-niche-api_queue-workflow
            docker service update --force kanvas-niche-api_queue-imports
            docker service update --force kanvas-niche-api_queue-notifications
