name: CI

on: [ "push" ]

jobs:
  run-tests:
    name: PHP ${{ matrix.php-versions }}
    runs-on: ubuntu-latest
    env:
      extensions: mbstring, intl, json, redis, swoole, xdebug
      APP_ENV: testing
      DB_HOST: 127.0.0.1
      REDIS_URL: tcp://127.0.0.1:6379?database=0
      REDIS_HOST: 127.0.0.1
      DB_USERNAME: root
      DB_PASSWORD: password
      DB_DATABASE: kanvas
      DB_INVENTORY_DATABASE: inventory
      DB_INVENTORY_USERNAME: root
      DB_INVENTORY_PASSWORD: password
      DB_SOCIAL_DATABASE: social
      DB_SOCIAL_USERNAME: root
      DB_SOCIAL_PASSWORD: password
      DB_CRM_DATABASE: social
      DB_CRM_USERNAME: root
      DB_CRM_PASSWORD: password
      KANVAS_APP_ID: 059ddaaf-89b5-4158-a85a-90cbd69aa34b
      APP_KEY: base64:4QZVysw1MIFmwZi0KvEOaHs0leAix3U6zueUZJtQYjY=
      APP_JWT_TOKEN: 4QZVysw1MIFmwZi0KvEOaHs0leAix3U6zueUZJtQYjY4QZVysw1MIFmwZi0KvEOaHs0leAix3U6zueUZJtQYjY
      TOKEN_AUDIENCE: http://localhost
      TOKEN_PASSWORD: base64:4QZVysw1MIFmwZi0KvEOaHs0leAix3U6zueUZJtQYjY=
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
      AWS_URL: ${{ secrets.AWS_URL }}
      SCOUT_DRIVER: database
      #APP_DEBUG: true
    strategy:
      fail-fast: false
      matrix:
        php-versions: ["8.2" ]
    services:
      mysql:
        image: mariadb:10.4
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: kanvas
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
    steps:
      - uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          tools: pecl

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Setup Inventory DB
        run: |
          mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE IF NOT EXISTS inventory;'

      - name: Setup Social DB
        run: |
          mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE IF NOT EXISTS social;'

      - name: Setup CRM DB
        run: |
          mysql -uroot -h127.0.0.1 -ppassword -e 'CREATE DATABASE IF NOT EXISTS crm;'

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Run Migrations
        run: php artisan migrate

      - name: Run Inventory Migrations
        run: php artisan migrate --path database/migrations/Inventory/ --database inventory

      - name: Run Social Migrations
        run: php artisan migrate --path database/migrations/Social/ --database social

      - name: Run Guild Migrations
        run: php artisan migrate --path database/migrations/Guild/ --database crm

      - name: Run Seeders
        run: php artisan db:seed

      - name: Create Role Admin
        run: php artisan role:create Admin

      - name: Create Role Users
        run: php artisan role:create Users

      - name: Create Role Agents
        run: php artisan role:create Agents

      - name: Run Tests
        if: success()
        run: php artisan test
