name: Deploy to EC2 and Update Docker Swarm Service

on:
  push:
  workflow_dispatch:

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ECR_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        run: |
          IMAGE_TAG=$(date +%s)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -f ${{ github.ref_name }}.Dockerfile -t ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG .
          docker tag ${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG

  # update-docker-swarm-service:
  #   runs-on: ubuntu-latest
  #   needs: deploy-to-ec2
  #   environment: ${{ github.ref_name }}
  #   steps:
  #     - name: executing remote ssh commands using password
  #       uses: appleboy/ssh-action@v1.2.1
  #       with:
  #         host: ${{ secrets.AWS_EC2_HOST }}
  #         username: ${{ secrets.AWS_EC2_USERNAME }}
  #         key: ${{ secrets.AWS_EC2_PRIVATE_SSH_KEY }}
  #         script: |
  #           cd ${{ secrets.AWS_EC2_TARGET_DIR }}

  #           # Ensure Swarm is initialized
  #           docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') || true

  #           # Create Swarm Network if it doesn't exist
  #           docker network ls | grep kanvas_docker_swarm_network || docker network create --driver overlay kanvas_docker_swarm_network

  #           # Deploy with Swarm
  #           docker stack deploy -c docker-compose.${{ github.ref_name }}.yml kanvas-niche-api
            
  #           # Wait for services to start
  #           sleep 10

  #           # Install dependencies inside Laravel container
  #           docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) composer install --optimize-autoloader

  #           # Clear and cache Laravel configurations
  #           docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan lighthouse:cache
  #           docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan lighthouse:clear-cache all
  #           docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan config:cache
            
  #           # Reload Octane
  #           docker exec -i $(docker ps --filter name=phpkanvas-ecosystem -q) php artisan octane:reload

  #           # Force update of all services to apply changes smoothly
  #           docker service update --force kanvas-niche-api_queue-social
  #           docker service update --force kanvas-niche-api_queue
  #           docker service update --force kanvas-niche-api_laravel-scheduler
  #           docker service update --force kanvas-niche-api_batch-logger-queue
  #           docker service update --force kanvas-niche-api_queue-user-interactions
  #           docker service update --force kanvas-niche-api_queue-scout-worker
  #           docker service update --force kanvas-niche-api_queue-workflow
  #           docker service update --force kanvas-niche-api_queue-imports
  #           docker service update --force kanvas-niche-api_queue-notifications
