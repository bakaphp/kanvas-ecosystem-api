input UserListInput {
    name: String!
    description: String
    is_public: Boolean
    is_default: Boolean
    files: [UserListFileInput]
}

input UserListFileInput {
    name: String!
    url: String!
}

type UserList @model(class: "\\Kanvas\\Social\\UsersLists\\Models\\UserList") {
    id: Int!
    users_id: Int!
    slug: String!
    name: String!
    description: String
    is_public: Boolean
    is_default: Boolean!
    own_all_items: Boolean!
    topics_items: [Topic]
    user: User!
    apps: [App]
    company: Company!
    items: [Message]
    files: [Filesystem],
    followers: [User]
    created_at: DateTime!
    updated_at: DateTime!
}

extend type Mutation @guard {
    createUserList(input: UserListInput!): UserList
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@create"
        )
    updateUserList(id: Int!, input: UserListInput!): UserList
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@update"
        )
    deleteUserList(id: Int!): Boolean
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@delete"
        )
    addToUserList(users_lists_id: Int!, messages_id: Int!): UserList
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@addToList"
        )
    removeFromUserList(users_lists_id: Int!, messages_id: Int!): UserList
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@removeFromList"
        )
    followList(
        users_lists_id: Int!
    ): UserList 
    @field(
        resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@followList"
    )
    unFollowList(
        users_lists_id: Int!
    ): UserList
    @field(
        resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@unFollowList"
    )
    
}

extend type Query @guard {
    getUsersLists(
        where: _
            @whereConditions(
                columns: [
                    "id",
                    "company_id",
                    "name",
                    "description",
                    "is_public"
                ]
            )
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
    ): [UserList!]!
        @paginate(
            model: "Kanvas\\Social\\UsersLists\\Models\\UserList"
            scopes: ["fromApp", "fromUser"]
            defaultCount: 25
        )
    isFollowingList(
        user_list_id: Int!
    ): Boolean
    @field(
        resolver: "App\\GraphQL\\Social\\Queries\\UsersLists\\UsersListsQuery@isFollowingList"
    )
}

extend type Query {
    searchUsersLists(
        where: _@whereConditions(columns: ["users_id"])
        search: String
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
    ): [UserList!]!
        @paginate(
            # model: "Kanvas\\Social\\UsersLists\\Models\\UserList"
            scopes: ["fromApp", "isPublic"]
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Builders\\UsersLists\\SearchBuilder@search"
        )
    getFilesUsersLists(user_list_id: Int!, field_name: String!): [Filesystem]
        @field(
            resolver: "App\\GraphQL\\Social\\Queries\\UsersLists\\UsersListsQuery@getFileByName"
        )
    getUsersListsFollowers(
        user_list_id: Int!
    ): [User] 
    @field(
        resolver: "App\\GraphQL\\Social\\Queries\\UsersLists\\UsersListsQuery@getUsersListsFollowers"
    )

}
