input UserListInput {
    name: String!
    description: String
    is_public: Boolean
    is_default: Boolean
}

union RelatedEntity = Message | Product

type Entity {
    id: ID!
    users_lists_id: ID!
    entity_id: ID!
    entity_namespace: String
    description: String
    is_pin: Boolean
    entity: RelatedEntity!
}

input EntityInput {
    users_lists_id: ID! 
    entity_id: ID! 
    entity_type: String!
}

type UserList @model(class: "\\Kanvas\\Social\\UsersLists\\Models\\UserList") {
    id: ID!
    slug: String!
    name: String!
    description: String
    is_public: Boolean
    is_default: Boolean!
    user: User!
    apps: [App]
    company: Company!
    items: [Message]
    entities: [Entity]
}

extend type Mutation @guard {
    createUserList(input: UserListInput!): UserList
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@create"
        )
    updateUserList(id: ID!, input: UserListInput!): UserList
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@update"
        )
    deleteUserList(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@delete"
        )
    addToUserList(users_lists_id: ID!, messages_id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@addToList"
        )
    removeFromUserList(users_lists_id: ID!, messages_id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@removeFromList"
        )
    addEntityToUserList(entity: EntityInput!): Boolean
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@addEntityToList"
        )
    removeEntityFromUserList(entity: EntityInput!): Boolean
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\UsersLists\\UsersListsManagement@removeEntityFromList"
        )
}

extend type Query @guard {
    getUsersLists(
        where: _
            @whereConditions(
                columns: ["id", "company_id", "name", "description"]
            )
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
    ): [UserList!]!
        @paginate(
            model: "Kanvas\\Social\\UsersLists\\Models\\UserList"
            scopes: ["fromApp", "fromUser"]
            defaultCount: 25
        )
      getUsersListsEntities(
        where: _
            @whereConditions(
                columns: ["id", "company_id", "name", "description"]
            )
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
    ): [UserList!]!
        @paginate(
            model: "Kanvas\\Social\\UsersLists\\Models\\UserList"
            scopes: ["fromApp", "fromUser"]
            defaultCount: 25
        )
}

extend type Query {
    searchUsersLists(
        search: String
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
    ): [UserList!]!
        @paginate(
            # model: "Kanvas\\Social\\UsersLists\\Models\\UserList"
            scopes: ["fromApp", "isPublic"]
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Builders\\UsersLists\\SearchBuilder@search"
        )
}
