input CommentInput {
    message_id: ID!
    comment: String!
    parent_id: ID
}

input CommentUpdateInput {
    comment: String!
    parent_id: ID
}

type MessageComments {
    id: ID!
    user: User!
    company: Company!
    parent: MessageComments
    children: [MessageComments!] @hasMany(type: PAGINATOR)
    message: Message! @belongsTo
    comment: Mixed!
}

extend type Mutation {
    addComment(input: CommentInput!): MessageComments!
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\Messages\\MessageCommentManagementMutation@addComment"
        )
    updateComment(
        id: ID!
        input: CommentUpdateInput!
    ): MessageComments!
        @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\Messages\\MessageCommentManagementMutation@updateComment"
        )
    deleteComment(id: ID!): Boolean!
       @field(
            resolver: "App\\GraphQL\\Social\\Mutations\\Messages\\MessageCommentManagementMutation@delete"
        )
}

extend type Query {
    comments(
        where: _
            @whereConditions(
                columns: ["message_id", "companies_id", "users_id", "parent_id"]
            )
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
    ): [MessageComments!]!
        @paginate(
            model: "Kanvas\\Social\\MessagesComments\\Models\\MessageComment"
            defaultCount: 15
            scopes: ["fromApp", "fromCompany"]
        )
}
