type Lead {
    id: ID!
    uuid: String!
    company: Company! @belongsTo
    branch: CompanyBranch! @belongsTo
    title: String!
    people: People
    user: User @belongsTo
    owner: User @belongsTo
    organization: Organization @belongsTo
    receiver: LeadReceiver @belongsTo
    status: LeadStatus @belongsTo
    type: LeadType @belongsTo
    source: LeadSource @belongsTo
    firstname: String
    lastname: String
    email: String
    phone: String
    description: String
    reason_lost: String
    pipeline: LeadPipeline @belongsTo
    stage: LeadPipelineStage @belongsTo(relation: "stage")
    participants: [LeadsParticipants!]! @hasMany
    channels: [SocialChannel]! @hasMany(relation: "socialChannels")
    systemModule: SystemModule
    tags: [Tag!]
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Queries\\Tags\\TagsQueries@getTagsBuilder"
        )
    files: [Filesystem!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\Filesystem\\FilesystemQuery@getFileByGraphType"
        )
    followers: [User!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Builders\\Follows\\FollowBuilder@getEntityFollowers"
        )
    custom_fields: [CustomField!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\CustomFields\\CustomFieldQuery@getAllByGraphType"
        )
    created_at: DateTime!
    updated_at: DateTime!
}

type LeadsParticipants {
    people: People! @belongsTo
    relationship: PeopleRelationship @belongsTo
}
type Rotation {
    id: ID!
    users_id: ID!
    companies_id: ID!
}
type LeadReceiver {
    id: ID!
    uuid: String!
    company: Company! @belongsTo
    branch: CompanyBranch! @belongsTo
    name: String!
    user: User @belongsTo
    agent: User @belongsTo
    rotation: Rotation! @belongsTo
    source: LeadSource @belongsTo
    type: LeadType @belongsTo
    source_name: String
    template: JSON
    total_leads: Int!
    is_default: Boolean!
    created_at: DateTime!
}

type LeadStatus {
    id: ID!
    name: String!
    is_default: Boolean!
}

type LeadSource {
    id: ID!
    company: Company! @belongsTo
    name: String!
    description: String
    type: LeadType
}

type LeadDashboard {
    total_active_leads: Int!
    total_closed_leads: Int!
    total_agents: Int!
}

input LeadsParticipantsInput {
    lead_id: Int!
    people_id: Int!
    relationship_id: Int!
}

input LeadInput {
    branch_id: ID
    title: String!
    people: PeopleInput!
    organization: OrganizationInput
    leads_owner_id: ID
    receiver_id: ID
    status_id: ID
    type_id: ID
    source_id: ID
    description: String
    reason_lost: String
    pipeline_stage_id: ID!
    custom_fields: [CustomFieldEntityInput!]
    files: [FilesystemInputUrl!]
}

input LeadUpdateInput {
    branch_id: ID!
    title: String
    people_id: ID!
    leads_owner_id: ID
    organization_id: ID
    receiver_id: ID
    status_id: ID
    type_id: ID
    source_id: ID
    description: String
    reason_lost: String
    pipeline_stage_id: ID
    custom_fields: [CustomFieldEntityInput!]
    files: [FilesystemInputUrl!]
}

extend type Mutation @guard {
    createLead(input: LeadInput!): Lead
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@create"
        )
    updateLead(id: ID!, input: LeadUpdateInput!): Lead
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@update"
        )
    deleteLead(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@delete"
        )
    restoreLead(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadManagementMutation@restore"
        )
    addLeadParticipant(input: LeadsParticipantsInput!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\ParticipantMutation@add"
        )
    removeLeadParticipant(input: LeadsParticipantsInput!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\ParticipantMutation@remove"
        )
    followLead(input: FollowInput!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\SocialMutation@follow"
        )
    unFollowLead(input: FollowInput!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\SocialMutation@unFollow"
        )
}

extend type Query @guard {
    leads(
        search: String @search
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "companies_id"
                    "companies_branches_id"
                    "leads_receivers_id"
                    "leads_owner_id"
                    "leads_status_id"
                    "title"
                    "pipeline_id"
                    "pipeline_stage_id"
                    "people_id"
                    "lead_types_id"
                    "status"
                ]
            )
        hasCustomFields: _
            @whereHasConditions(
                relation: "customFields"
                columns: ["name", "value"]
            )
        orderBy: _
            @orderBy(
                columns: [
                    "id"
                    "created_at"
                    "updated_at"
                    "title"
                    "status"
                    "pipeline_stage_id"
                    "firstname"
                    "lastname"
                    "email"
                    "phone"
                ]
            )
    ): [Lead!]!
        @paginate(
            model: "Kanvas\\Guild\\Leads\\Models\\Lead"
            scopes: ["fromCompany", "notDeleted", "filterSettings"]
            defaultCount: 25
        )

    leadsDashboard(
        where: _
            @whereConditions(
                columns: ["companies_branches_id", "leads_owner_id", "users_id"]
            )
    ): LeadDashboard!
        @paginate(
            builder: "App\\GraphQL\\Guild\\Builders\\Leads\\DashboardBuilder@getCompanyInfo"
        )
}
