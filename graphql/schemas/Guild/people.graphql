type People {
    id: ID!
    uuid: String!
    company: Company! @belongsTo
    user: User! @belongsTo
    name: String! @method(name: "getName")
    firstname: String!
    middlename: String
    lastname: String
    subscriptions: [PeopleSubscription!]! @hasMany
    dob: Date
    organizations: [Organization!] @belongsToMany
    contacts: [Contact!]! @hasMany
    address: [Address!]! @hasMany

    employment_history: [PeopleEmploymentHistory!]
        @hasMany(relation: "employmentHistory")
    files: [Filesystem!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\Filesystem\\FilesystemQuery@getFileByGraphType"
        )
    custom_fields: [CustomField!]! @cacheRedis
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\CustomFields\\CustomFieldQuery@getAllByGraphType"
        )
    interactions: [EntityInteraction!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Builders\\Interactions\\EntityInteractionsBuilder@getAll"
        )
    tags: [Tag!]
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Queries\\Tags\\TagsQueries@getTagsBuilder"
        )
}
type PeopleSubscription {
    id: ID!
    subscription_type: String!
    status: String!
    start_date: Date!
    end_date: Date
    first_date: Date
    next_renewal: Date
}

type PeopleEmploymentHistory {
    id: ID!
    organization: Organization! @belongsTo
    people: People! @belongsTo
    position: String!
    income: Float
    start_date: Date!
    end_date: Date
    status: Int!
    income_type: String
}

type PeopleRelationship {
    id: ID!
    name: String!
    description: String
    company: Company! @belongsTo
}

input PeopleInput {
    id: ID
    firstname: String!
    middlename: String
    lastname: String
    facebook_contact_id: String
    twitter_contact_id: String
    linkedin_contact_id: String
    google_contact_id: String
    dob: String
    contacts: [ContactInput!]
    address: [AddressInput!]
    files: [FilesystemInputUrl!]
    custom_fields: [CustomFieldEntityInput!]
    tags: [TagInput!]
    created_at: DateTime
}

input PeopleParticipantInput {
    id: ID
    firstname: String!
    middlename: String
    lastname: String
    participants_types_id: ID!
    facebook_contact_id: String
    twitter_contact_id: String
    linkedin_contact_id: String
    google_contact_id: String
    dob: Date
    contacts: [ContactInput!]
    address: [AddressInput!]
}

extend type Query @guard {
    peoples(
        search: String @search
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "companies_id"
                    "dob"
                    "name"
                    "firstname"
                    "lastname"
                ]
            )
        hasEmails: _
            @whereHasConditions(relation: "emails", columns: ["id", "value"])
        hasPhones: _
            @whereHasConditions(relation: "phones", columns: ["id", "value"])
        hasTags: _ @whereHasConditions(relation: "tags", columns: ["name"])
        hasAddress: _
            @whereHasConditions(
                relation: "address"
                columns: ["address", "city", "state", "zip"]
            )
        hasCustomFields: _
            @whereHasConditions(
                relation: "customFields"
                columns: ["name", "value"]
            )
        orderBy: _
            @orderBy(columns: ["id", "created_at", "updated_at", "name", "dob"])
    ): [People!]!
        @paginate(
            model: "Kanvas\\Guild\\Customers\\Models\\People"
            scopes: ["fromApp", "fromCompany", "notDeleted"]
            defaultCount: 25
        )
    peopleRelationships(
        where: _ @whereConditions(columns: ["name", "description", "id"])
    ): [PeopleRelationship!]!
        @paginate(
            model: "Kanvas\\Guild\\Customers\\Models\\PeopleRelationship"
            defaultCount: 25
            scopes: ["fromApp", "fromCompany"]
        )

    peopleCount: Int
        @count(
            model: "Kanvas\\Guild\\Customers\\Models\\People"
            scopes: ["fromApp", "fromCompany", "notDeleted"]
        )
    peopleCountByTag(tag: String!): Int
        @field(
            resolver: "App\\GraphQL\\Guild\\Queries\\PeopleManagementQueries@countByTag"
        )
    peopleCountBySubscriptionType(type: String!): Int
        @field(
            resolver: "App\\GraphQL\\Guild\\Queries\\PeopleManagementQueries@getBySubscriptionType"
        )
}

extend type Mutation @guard {
    createPeople(input: PeopleInput!): People
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@create"
        )
    updatePeople(id: ID!, input: PeopleInput!): People
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@update"
        )
    deletePeople(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@delete"
        )
    restorePeople(id: ID!): Boolean
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleManagementMutation@restore"
        )
    importPeoples(input: [PeopleInput!]!, companyId: Int): String!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Peoples\\PeopleImportMutation@import"
        )
}
