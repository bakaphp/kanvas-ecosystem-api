type LeadRotation {
    id: ID!
    company: Company! @belongsTo(relation: "companies")
    name: String!
    leads_rotations_email: String
    hits: Int
    agents: [LeadRotationAgent!] @hasMany(relation: "agents")
    created_at: DateTime!
    updated_at: DateTime
}

type LeadRotationAgent {
    id: ID!
    user: User! @belongsTo(relation: "user")
    phone: String!
    percent: Float!
    hits: Int
    created_at: DateTime!
    updated_at: DateTime
}

input LeadRotationAgentInput {
    users_id: ID!
    phone: String!
    percent: Float!
    hits: Int
}

input LeadRotationInput {
    name: String!
    leads_rotations_email: String
    hits: Int
    agents: [LeadRotationAgentInput!]
}

extend type Mutation @guard {
    createLeadRotation(input: LeadRotationInput!): LeadRotation!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadRotationManagementMutation@create"
        )
    updateLeadRotation(id: ID!, input: LeadRotationInput!): LeadRotation!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadRotationManagementMutation@update"
        )
    deleteLeadRotation(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadRotationManagementMutation@delete"
        )
}

extend type Query @guard {
    leadsRotations(
        where: _
            @whereConditions(columns: ["name", "leads_rotations_email", "hits"])
    ): [LeadRotation!]!
        @paginate(
            model: "Kanvas\\Guild\\Leads\\Models\\LeadRotation"
            defaultCount: 10
            scopes: ["fromCompany", "fromApp"]
        )
}
