type LeadRotation {
    id: ID!
    companies: Company! @belongsTo(relation: "companies")
    name: String!
    leads_rotations_email: String
    hits: Int
    agents: [User!] @hasMany(relation: "agents")
}

input LeadRotationInput {
    name: String!
    leads_rotations_email: String
    hits: Int,
    agents: [ID!]
}

extend type Mutation @guard {
    createLeadRotation(input: LeadRotationInput!): LeadRotation!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadRotationManagementMutation@create"
        )
    updateLeadRotation(id: ID!, input: LeadRotationInput!): LeadRotation!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadRotationManagementMutation@update"
        )
    deleteLeadRotation(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Guild\\Mutations\\Leads\\LeadRotationManagementMutation@delete"
        )
}

extend type Query @guard {
    leadsRotations(
        where: _
            @whereConditions(columns: ["name", "leads_rotations_email", "hits"])
    ): [LeadRotation!]!
        @paginate(
            model: "Kanvas\\Guild\\Leads\\Models\\LeadRotation"
            defaultCount: 10
            scopes: ["fromCompany"]
        )
}
