type Region {
    id: Int!
    companies_id: Int!
    currency_id: Int!
    companies: Company! @belongsTo(relation: "company")
    currencies: Currency! @belongsTo(relation: "currencies")
    uuid: String!
    name: String!
    slug: String!
    short_slug: String!
    settings: String
    is_default: Boolean!
}

input RegionInput {
    currency_id: Int!
    name: String!
    slug: String
    companies_id: Int
    short_slug: String!
    settings: String
    is_default: Int!
}
input RegionInputUpdate {
    currency_id: Int
    name: String
    slug: String
    short_slug: String
    settings: String
    is_default: Int
}
extend type Query @guard {
    regions(
        where: _
            @whereConditions(
                columns: ["name", "slug", "short_slug", "is_default", "companies_id"]
            )
        orderBy: _ @orderBy(columns: ["id", "name", "created_at", "is_default"])
    ): [Region!]!
        @paginate(
            builder: "App\\GraphQL\\Inventory\\Builders\\Regions\\Region@all"
            scopes: ["fromApp", "fromCompany", "notDeleted"]
            defaultCount: 25
        )
}
extend type Mutation @guard {
    createRegion(input: RegionInput!): Region!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Regions\\Region@create"
        )
    updateRegion(id: Int!, input: RegionInputUpdate!): Region!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Regions\\Region@update"
        )
    deleteRegion(id: Int!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Regions\\Region@delete"
        )
}
