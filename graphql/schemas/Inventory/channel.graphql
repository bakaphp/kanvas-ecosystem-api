type Channel {
    id: ID!
    companies_id: Int!
    users_id: Int!
    companies: Company! @belongsTo(relation: "company")
    users: User
    name: String!
    uuid: String!
    description: String
    slug: String!
    is_default: Boolean!
    is_published: Boolean!
}

input CreateChannelInput {
    name: String!
    description: String
    slug: String
    is_default: Boolean
    is_published: Boolean
}

input UpdateChannelInput {
    name: String
    description: String
    slug: String
    is_default: Boolean
    is_published: Int
}

extend type Mutation @guard {
    createChannel(input: CreateChannelInput!): Channel!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Channels\\ChannelMutation@create"
        )
    updateChannel(id: ID!, input: UpdateChannelInput!): Channel!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Channels\\ChannelMutation@update"
        )
    deleteChannel(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Channels\\ChannelMutation@delete"
        )
    unPublishAllVariantsFromChannel(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Inventory\\Mutations\\Channels\\ChannelMutation@unPublishAllVariantsFromChannel"
        )
}
extend type Query @guard {
    channels(
        search: String @search
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "is_published"
                    "slug"
                ]
            )
        orderBy: _
            @orderBy(
                columns: [
                    "id"
                    "name"
                    "slug"
                    "created_at"
                    "updated_at"
                ]
            )
    ): [Channel!]
        @paginate(
            model: "Kanvas\\Inventory\\Channels\\Models\\Channels"
            scopes: ["fromApp", "fromCompany"]
            defaultCount: 25
        )
}
