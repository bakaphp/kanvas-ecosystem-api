type CompanySubscription {
    id: ID!
    stripe_id: ID!
    stripe_status: String!
    stripe_price: Int
    items: [SubscriptionItem!]! @hasMany(relation: "items")
    quantity: Int!
    trial_ends_at: DateTime
    ends_at: DateTime
    created_at: String
    updated_at: String
}

type SubscriptionItem {
    id: ID!
    stripe_id: ID!
    stripe_product: ID!
    stripe_product_name: String!
    stripe_price: ID!
    quantity: Int!
    created_at: DateTime
    updated_at: DateTime
}

input SubscriptionInput {
    apps_plans_prices_id: ID!
    name: String
    payment_method_id: String!
    trial_days: Int
}

input SubscriptionUpdateInput {
    apps_plans_prices_id: ID!
}

extend type Mutation @guard {
    createSubscription(input: SubscriptionInput!): CompanySubscription!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@create"
        )

    updateSubscription(input: SubscriptionUpdateInput!): CompanySubscription!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@update"
        )
    cancelSubscription(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@cancel"
        )
    reactiveSubscription(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@reactivate"
        )
}

extend type Query @guard {
    companySubscriptions(
        search: String @search
        where: _ @whereConditions(columns: ["id", "stripe_status"])
        orderBy: _ @orderBy(columns: ["id", "created_at", "updated_at", "name"])
    ): [CompanySubscription!]!
        @paginate(
            builder: "App\\GraphQL\\Subscription\\Builders\\Subscriptions\\SubscriptionBuilder@getSubscriptions"
            defaultCount: 25
        )
}
