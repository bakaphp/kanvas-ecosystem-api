type CompanySubscription {
    id: ID!
    companies_id: ID
    apps_plans_id: ID
    name: String
    subscription_id: ID
    payment_method_id: String!
    trial_days: Int
    items: [SubscriptionItem!] @hasMany(relation: "subscriptionItem")
    is_active: Boolean
    is_cancelled: Boolean
    paid: Boolean
    charge_date: String
    created_at: String
    updated_at: String
}

input SubscriptionInput {
    items: [SubscriptionItemInput!]! 
    name: String
    payment_method_id: String!
    trial_days: Int
}

input SubscriptionUpdateInput {
    subscription_id: ID!
    name: String
    payment_method_id: String
    trial_days: Int
}

input AddSubscriptionItemInput {
    subscription_id: ID!
    price_id: String!
    quantity: Int!
}

extend type Mutation @guard {
    createSubscription(input: SubscriptionInput!): CompanySubscription! 
    @field(resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@create")
    
    updateSubscription(input: SubscriptionUpdateInput!): CompanySubscription!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@update"
        )
    cancelSubscription(id: ID!): CompanySubscription!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@cancel"
        )
    addSubscriptionItem(input: AddSubscriptionItemInput!): SubscriptionItem!
        @field(
            resolver: "App\\GraphQL\\Subscription\\Mutations\\Subscriptions\\SubscriptionMutation@addSubscriptionItem"
        )
}

extend type Query @guard {
    companySubscriptions(
        search: String @search
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "companies_id"
                    "apps_plans_id"
                    "name"
                    "is_active"
                    "is_cancelled"
                    "paid"
                ]
            )
        hasItems: _
            @whereHasConditions(
                relation: "subscriptionItem"
                columns: ["id", "quantity", "price_id"]
            )
        orderBy: _ @orderBy(columns: ["id", "created_at", "updated_at", "name"])
    ): [CompanySubscription!]!
        @paginate(
            scopes: ["fromApp", "notDeleted"]
            builder: "App\\GraphQL\\Subscription\\Builders\\Subscriptions\\SubscriptionBuilder@getSubscriptions"
            defaultCount: 25
        )
}
