type Event {
    id: ID!
    uuid: String!
    name: String!
    slug: String!
    description: String
    version_count: Int!
    user: User! @belongsTo(relation: "user")
    company: Company! @belongsTo(relation: "company")
    theme: EventTheme @belongsTo(relation: "theme")
    themeArea: EventThemeArea @belongsTo(relation: "themeArea")
    eventStatus: EventClass @belongsTo(relation: "eventStatus")
    type: EventType @belongsTo(relation: "eventType")
    class: EventClass @belongsTo(relation: "eventClass")
    category: EventCategory @belongsTo(relation: "eventCategory")
    versions: [EventVersion!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Event\\Builders\\Events\\EventVersionBuilder@getEventVersion"
        )
    created_at: DateTime
    updated_at: DateTime
    files: [Filesystem!]!
        @cacheRedis
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\Filesystem\\FilesystemQuery@getFileByGraphType"
        )
    custom_fields: [CustomField!]!
        @paginate(
            defaultCount: 25
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\CustomFields\\CustomFieldQuery@getAllByGraphType"
        )
    tags: [Tag!]
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Queries\\Tags\\TagsQueries@getTagsBuilder"
        )
}

type EventVersion {
    id: ID!
    uuid: String!
    name: String!
    company: Company! @belongsTo(relation: "company")
    event: Event! @belongsTo(relation: "event")
    user: User! @belongsTo(relation: "user")
    version_number: Int!
    version: String!
    slug: String!
    agenda: Mixed
    metadata: Mixed
    description: String
    classification: String
    price_per_ticket: Float!
    created_at: DateTime
    updated_at: DateTime
    dates: [EventVersionDate!]! @hasMany(relation: "dates")
    total_attendees: Int!
    participants: [EventVersionParticipant!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Event\\Builders\\Events\\EventVersionBuilder@getParticipants"
        )
    facilitators: [Facilitator!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Event\\Builders\\Events\\EventVersionBuilder@getFacilitators"
        )
    participant_attendees: [EventVersionParticipantDate!]!
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Event\\Builders\\Events\\EventVersionBuilder@getParticipantAttendees"
        )
    files: [Filesystem!]!
        @cacheRedis
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Ecosystem\\Queries\\Filesystem\\FilesystemQuery@getFileByGraphType"
        )
    custom_fields: [CustomField!]!
        @paginate(
            defaultCount: 25
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\CustomFields\\CustomFieldQuery@getAllByGraphType"
        )
    tags: [Tag!]
        @paginate(
            defaultCount: 25
            builder: "App\\GraphQL\\Social\\Queries\\Tags\\TagsQueries@getTagsBuilder"
        )
}

type EventVersionDate {
    id: ID!
    event_version: EventVersion! @belongsTo(relation: "eventVersion")
    user: User! @belongsTo(relation: "user")
    date: Date! @method(name: "getDate")
    start_time: String!
    end_time: String!
}

type EventVersionParticipant {
    id: ID!
    event_version: EventVersion! @belongsTo(relation: "eventVersion")
    participant: Participant! @belongsTo(relation: "participant")
    ticket_price: Float
    discount: Float
    invoice_date: Date
    metadata: Mixed
    participant_type: ParticipantType @belongsTo(relation: "participantType")
    created_at: DateTime
    updated_at: DateTime
}

type EventVersionParticipantDate {
    id: ID!
    event_version_date: EventVersionDate!
        @belongsTo(relation: "eventVersionDate")
    participant: Participant! @belongsTo(relation: "participant")
    arrived: DateTime!
    start_time: String!
    end_time: String!
}

input EventInput {
    name: String!
    slug: String
    description: String
    theme_id: ID
    theme_area_id: ID
    status_id: ID
    type_id: ID!
    class_id: ID
    category_id: ID!
    dates: [EventVersionDateInput!]!
}

input EventUpdateInput {
    name: String
    description: String
}

input EventVersionDateInput {
    date: Date!
    start_time: String!
        @rules(apply: ["required", "regex:/^([01]\\d|2[0-3]):([0-5]\\d)$/"])
    end_time: String!
        @rules(apply: ["required", "regex:/^([01]\\d|2[0-3]):([0-5]\\d)$/"])
}

extend type Mutation @guard {
    createEvent(input: EventInput!): Event!
        @field(
            resolver: "App\\GraphQL\\Event\\Mutations\\Events\\EventManagementMutation@create"
        )
    updateEvent(id: ID!, input: EventUpdateInput!): Event!
        @field(
            resolver: "App\\GraphQL\\Event\\Mutations\\Events\\EventManagementMutation@update"
        )
    deleteEvent(id: ID!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Event\\Mutations\\Events\\EventManagementMutation@delete"
        )
}

extend type Query @guard {
    events(
        search: String @search
        where: _
            @whereConditions(columns: ["id", "name", "slug", "companies_id"])
        orderBy: _ @orderBy(columns: ["id", "created_at", "updated_at", "name"])
    ): [Event!]!
        @paginate(
            scopes: ["fromApp", "fromCompany", "notDeleted"]
            model: "Kanvas\\Event\\Events\\Models\\Event"
            defaultCount: 25
        )
    eventVersions(
        search: String @search
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "name"
                    "slug"
                    "event_id"
                    "companies_id"
                    "version_number"
                ]
            )
        orderBy: _
            @orderBy(
                columns: [
                    "id"
                    "created_at"
                    "updated_at"
                    "name"
                    "event_id"
                    "version_number"
                ]
            )
    ): [EventVersion!]!
        @paginate(
            scopes: ["fromApp", "fromCompany", "notDeleted"]
            model: "Kanvas\\Event\\Events\\Models\\EventVersion"
            defaultCount: 25
        )
    eventVersionParticipants(
        search: String @search
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "event_version_id"
                    "participant_id"
                    "ticket_price"
                    "discount"
                    "invoice_date"
                    "participant_type_id"
                ]
            )
        orderBy: _
            @orderBy(
                columns: [
                    "id"
                    "created_at"
                    "updated_at"
                    "event_version_id"
                    "participant_id"
                    "ticket_price"
                    "discount"
                    "invoice_date"
                    "participant_type_id"
                ]
            )
    ): [EventVersionParticipant!]!
        @paginate(
            scopes: ["fromApp", "fromCompany", "notDeleted"]
            model: "Kanvas\\Event\\Events\\Models\\EventVersionParticipant"
            defaultCount: 25
        )
}
