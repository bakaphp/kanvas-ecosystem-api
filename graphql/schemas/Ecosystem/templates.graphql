type Template {
    users_id: Int!
    companies_id: Int!
    user: User @belongsTo(relation: "user")
    company: Company @belongsTo(relation: "company")
    name: String!
    parent_template_id: Int
    parent: Template @belongsTo(relation: "parentTemplate")
    template: Mixed!
    template_variables: [TemplateVariables!]@hasMany(relation: "templateVariables")
    created_at: String
    updated_at: String
    is_deleted: Int
}

input TemplateInput {
    name: String!
    parent_template_id: Int!
    template_variables: [TemplateVariableInput!]!
    template: String!
}

type TemplateVariables {
    name: String
    value: String
    template_id: Int
}

input TemplateVariableInput {
    key: String!
    value: String!
}

extend type Mutation @guard {
    createTemplate(input: TemplateInput!): Template!
        @field(
            resolver: "\\App\\GraphQL\\Ecosystem\\Mutations\\Templates\\TemplatesManagementMutation@createOrUpdate"
        )
    updateTemplate(input: TemplateInput!): Template!
        @field(
            resolver: "\\App\\GraphQL\\Ecosystem\\Mutations\\Templates\\TemplatesManagementMutation@createOrUpdate"
        )
}

extend type Query @guard {
    templates(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "users_id"
                    "companies_id"
                    "apps_id"
                    "name"
                ]
            )
        orderBy: _ @orderBy(columns: ["id"], direction: "DESC")
    ): [Template!]!
        @paginate(
            model: "Kanvas\\Templates\\Models\\Templates"
            scopes: ["fromApp","notDeleted"]
        )
}