type Country {
    id: ID!
    name: String!
    code: String!
    flag: String
    states: [States!]! @hasMany
}
type States {
    id: ID!
    name: String!
    code: String!
    country: Country! @belongsTo
    cities: [Cities!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime
    is_deleted: Boolean!
}
type Cities {
    id: ID!
    name: String!
    country: Country! @belongsTo
    countries_id: Int!
    states_id: Int!
    latitude: Float
    longitude: Float
}

extend type Query {
    countries(
        orderBy: _ @orderBy(columns: ["id", "created_at", "name"])
        where: _ @whereConditions(columns: ["name", "code", "flag", "id"])
        hasStates: _ @whereHasConditions(columns: ["name"])
        hasCities: _ @whereHasConditions(columns: ["name"])
    ): [Country!]!
        @paginate(
            defaultCount: 25
            model: "\\Kanvas\\Locations\\Models\\Countries"
        )
    country(id: Int! @eq): Country
        @find(model: "\\Kanvas\\Locations\\Models\\Countries")
}

input CreateCountryInput {
    name: String!
    code: String!
    flag: String
    created_at: String!
}
input CreateStateInput {
    name: String!
    code: String!
    cities: [CreateCityInput!]! @hasMany
}
input CreateCityInput {
    name: String!
    latitude: Float
    longitude: Float
}

extend type Mutation @guardByAppKey {
    createCountry(
        name: String!
        code: String!
        flag: String
        states: [CreateStateInput!]!
    ): Country!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Locations\\CreateCountry"
        )
    updateCountry(id: ID!, name: String!, code: String!, flag: String): Country
        @update(model: "\\Kanvas\\Locations\\Models\\Countries")
    deleteCountry(id: ID!): Country!
        @delete(model: "\\Kanvas\\Locations\\Models\\Countries")
}
