type App {
    id: Int!
    name: String!
    description: String
    url: String
    domain: String
    default_apps_plan_id: Int
    is_actived: Int
    key: String
    payments_active: Int
    ecosystem_auth: Int
    is_public: Int
    domain_based: Int
    is_deleted: Int!
    created_at: String!
    updated_at: String!
}

type Template {
    id: Int!
    name: String!
    template: String!
}

input AppInput {
    name: String!
    description: String!
    url: String!
    domain: String!
    default_apps_plan_id: Int
    is_actived: Int
    key: String
    payments_active: Int!
    ecosystem_auth: Int!
    is_public: Int!
    domain_based: Int!
}

input appSettingInput {
    name: String!
    value: Mixed!
}

input templateInput {
    name: String!
    template: String!
}

type AppSettings {
    name: String!
    description: String
    settings: Mixed!
}

extend type Query @guard {
    apps(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "key"
                    "name"
                    "domain"
                    "is_active"
                    "key"
                    "is_public"
                    "domain_based"
                ]
            )
        orderBy: _ @orderBy(columns: ["id"])
    ): [App!]!
        @paginate(
            model: "Kanvas\\Apps\\Models\\Apps"
            scopes: ["userAssociated"]
        )
}

extend type Query {
    getAppSettings(key: String! @eq): AppSettings
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Apps\\AppsList@getAppSettings"
        )
}

extend type Mutation @guard {
    createApp(input: AppInput): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@createApp"
        )
    updateApp(id: String!, input: AppInput): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@updateApp"
        )
    deleteApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@deleteApp"
        )
    restoreApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@restoreApp"
        )
    assignCompanyToApp(id: String!, companyId: String!): Company!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@assignCompanyToApp"
        )
    removeCompanyToApp(id: String!, companyId: String!): Company!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@removeCompanyToApp"
        )
    activateApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@activeApp"
        )
    deactivateApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@deActive"
        )
    saveAppSettings(id: String!, input: appSettingInput): Mixed!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@saveSettings"
        )
    addTemplateToApp(id: String!, input: templateInput!): Template
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@createAppTemplate"
        )
}
