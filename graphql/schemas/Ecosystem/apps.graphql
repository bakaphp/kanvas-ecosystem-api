type App {
    id: Int!
    name: String!
    description: String
    url: String
    domain: String
    default_apps_plan_id: Int
    is_actived: Int
    key: String
    payments_active: Int
    ecosystem_auth: Int
    is_public: Int
    domain_based: Int
    created_at: String!
    updated_at: String!
}

type Template {
    id: Int!
    name: String!
    template: String!
}

input AppInput {
    name: String!
    description: String!
    url: String!
    domain: String!
    default_apps_plan_id: Int
    is_actived: Int
    key: String
    payments_active: Int!
    ecosystem_auth: Int!
    is_public: Int!
    domain_based: Int!
}
input appSmtpInput {
    host: String!
    port: String!
    username: String!
    password: String!
    encryption: String!
    fromEmail: String!
    fromName: String!
}
input appSettingInput {
    name: String!
    value: Mixed!
}

input s3FilesystemConfig {
    key: String!
    secret: String!
    region: String!
    bucket: String
    url: String
}

input gcsFilesystemConfig {
    type: String!
    project_id: String!
    private_key_id: String!
    private_key: String!
    client_email: String!
    client_id: String!
    token_uri: String!
    auth_uri: String!
    auth_provider_x509_cert_url: String
    client_x509_cert_url: String
}

input s3FilesystemConfigInput {
    name: String!
    value: s3FilesystemConfig!
}

input gcsFilesystemConfigInput {
    name: String!
    value: gcsFilesystemConfig!
}

input templateInput {
    name: String!
    template: String!
}

type AppSettings {
    name: String!
    description: String
    settings: Mixed!
}

extend type Query @guard {
    apps(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "key"
                    "name"
                    "domain"
                    "is_active"
                    "key"
                    "is_public"
                    "domain_based"
                ]
            )
        orderBy: _ @orderBy(columns: ["id"])
    ): [App!]!
        @paginate(
            model: "Kanvas\\Apps\\Models\\Apps"
            scopes: ["userAssociated"]
        )
}

extend type Query @guardByAppKey {
    appUsers(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "firstname"
                    "lastname"
                    "displayname"
                    "email"
                    "phone"
                    "user_active"
                    "created_at"
                    "updated_at"
                ]
            )
        orderBy: _ @orderBy(columns: ["id"])
    ): [User!]!
        @paginate(
            builder: "App\\GraphQL\\Ecosystem\\Queries\\Apps\\AppUserManagement@getAllAppUsers"
            defaultCount: 10
        )
}

extend type Query {
    getAppSettings(key: String! @eq): AppSettings
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Apps\\AppsList@getAppSettings"
        )
}

extend type Mutation @guardByAppKey {
    createApp(input: AppInput): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@createApp"
        )
    updateApp(id: String!, input: AppInput): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@updateApp"
        )
    deleteApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@deleteApp"
        )
    restoreApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@restoreApp"
        )
    assignCompanyToApp(id: String!, companyId: String!): Company!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppCompanyMutation@assignCompanyToApp"
        )
    removeCompanyToApp(id: String!, companyId: String!): Company!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppCompanyMutation@removeCompanyToApp"
        )
    activateApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@activeApp"
        )
    deactivateApp(id: String!): App!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppManagementMutation@deActive"
        )
    saveAppSettings(id: String!, input: appSettingInput): Mixed!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppSettingsMutation@saveSettings"
        )
    saveAppSmtpSettings(
        id: String!
        input: appSmtpInput!
    ): Boolean!
    @field(
        resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppSettingsMutation@saveAppSmtpSettings"
    )
    addTemplateToApp(id: String!, input: templateInput!): Template
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppTemplateMutation@createAppTemplate"
        )
    appUserUpdatePassword(uuid: String!, password: String!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppUserManagementMutation@updatePassword"
        )
    appUserUpdateEmail(uuid: String!, email: Email!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppUserManagementMutation@updateEmail"
        )
    saveS3Settings(id: String!, input: s3FilesystemConfigInput): Mixed!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppSettingsMutation@saveSettings"
        )
    saveGcsSettings(id: String!, input: gcsFilesystemConfigInput): Mixed!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Apps\\AppSettingsMutation@saveSettings"
        )
}
