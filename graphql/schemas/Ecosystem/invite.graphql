type Invite {
    id: ID!
    invite_hash: String!
    users_id: Int!
    branch: CompanyBranch! @belongsTo
    role_id: Int!
    email: String!
    firstname: String
    lastname: String
    description: String
}

type ExternalInvite {
    invite_hash: String!
    users_id: Int!
    branch: CompanyBranch! @belongsTo
    role_id: Int!
    email: String!
    firstname: String
    lastname: String
    description: String
}

type ExternalAdminInvite {
    invite_hash: String!
    users_id: Int!
    email: String!
    firstname: String
    lastname: String
}

input InviteInput {
    role_id: Int
    companies_branches_id: Int
    email: String!
    firstname: String
    lastname: String
    description: String
    email_template: String
    custom_fields: [CustomFieldEntityInput!]
}

input AdminInviteInput {
    email: String!
    firstname: String
    lastname: String
    description: String
    email_template: String
    custom_fields: [CustomFieldEntityInput!]
}

input CompleteInviteInput {
    invite_hash: String!
    password: String!
    firstname: String!
    lastname: String
    phone_number: String
}

extend type Mutation @guard {
    inviteUser(input: InviteInput!): Invite!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@insertUserInvite"
        )
    inviteAdmin(input: AdminInviteInput!): Invite!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@insertAdminInvite"
        )
    deleteInvite(id: Int!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@deleteInvite"
        )
    deleteAdminInvite(id: Int!): Boolean!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@deleteAdminInvite"
        )
}

extend type Mutation {
    getInvite(hash: String!): ExternalInvite!
        @deprecated(reason: "use the query getInvite instead")
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@getInvite"
        )
    processInvite(input: CompleteInviteInput!): TokenResponse!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@process"
        )
    processAdminInvite(input: CompleteInviteInput!): TokenResponse!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Mutations\\Users\\UserManagementMutation@processAdmin"
        )
}
extend type Query @guard {
    usersInvites(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "users_id"
                    "companies_id"
                    "companies_branches_id"
                    "role_id"
                    "apps_id"
                    "email"
                    "firstname"
                    "lastname"
                    "description"
                ]
            )
        orderBy: _
            @orderBy(
                columns: ["id", "firstname", "lastname"]
                direction: "DESC"
            )
    ): [Invite!]!
        @paginate(
            model: "Kanvas\\Users\\Models\\UsersInvite"
            scopes: ["fromCompany", "fromApp"]
        )
    adminInvites(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "users_id"
                    "apps_id"
                    "email"
                    "firstname"
                    "lastname"
                    "description"
                ]
            )
        orderBy: _
            @orderBy(
                columns: ["id", "firstname", "lastname"]
                direction: "DESC"
            )
    ): [Invite!]!
        @paginate(
            model: "Kanvas\\Users\\Models\\AdminInvite"
            scopes: ["fromApp", "notDeleted"]
        )
}

extend type Query {
    getInvite(hash: String!): ExternalInvite!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Users\\UserInviteQuery@getInvite"
        )
    getAdminInvite(hash: String!): ExternalAdminInvite!
        @field(
            resolver: "App\\GraphQL\\Ecosystem\\Queries\\Users\\AdminInviteQuery@getInvite"
        )
}
