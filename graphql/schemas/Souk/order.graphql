type Order {
    id: ID!
    uuid: String!
    tracking_client_id: String
    user_email: String
    user_phone: String
    token: String
    billing_address_id: Int
    shipping_address_id: Int
    order_number: Int
    user_id: Int
    user: User! @belongsTo
    people: People! @belongsTo
    company: Company! @belongsTo
    total_gross_amount: Float
    total_net_amount: Float
    shipping_price_gross_amount: Float
    shipping_price_net_amount: Float
    discount_amount: Float
    discount_name: String
    voucher_id: Int
    language_code: String
    status: String
    fulfillment_status: String
    shipping_method_name: String
    shipping_method_id: Int
    display_gross_prices: Boolean
    translated_discount_name: String
    customer_note: String
    weight: Float
    checkout_token: String
    currency: String
    metadata: Mixed
    private_metadata: String
    is_deleted: Boolean!
    created_at: String!
    updated_at: String
    items: [OrderItem!]
}

type OrderItem {
    id: ID!
    uuid: String!
    product_name: String!
    product_sku: String!
    quantity: Int!
    unit_price_net_amount: Float
    unit_price_gross_amount: Float
    is_shipping_required: Boolean
    quantity_fulfilled: Int
    variant: Variant! @belongsTo
    tax_rate: Float
    translated_product_name: String
    currency: String
    translated_variant_name: String
    variant_name: String!
    is_deleted: Boolean!
    created_at: String!
    updated_at: String
}

type PaymentResult {
    status: String!
    transaction_id: ID!
    order_status: String
    message: Mixed
}

type GeneratePaymentIntentResult {
    client_secret: String!
    status: String
    message: Mixed
}

type OrderResult {
    order: Order
    message: Mixed
}

input CreditCardInput {
    name: String!
    number: String!
    exp_month: Int!
    exp_year: Int!
    cvv: Int!
}

input OrderBillingInput {
    address: String!
    address2: String
    city: String!
    state: String!
    zip: String!
    country: String!
}

input CartOrderInput {
    cartId: ID!
    email: String!
    customer: PeopleInput!
    billing: OrderBillingInput!
    address: AddressInput
    note: String
}

input OrderInput {
    cartId: ID!
    payment: CreditCardInput!
    billing: OrderBillingInput
}

input OrderCustomerInput {
    email: String!
    phone: String
    note: String
}

input OrderCartInput {
    cartId: ID!
    customer: OrderCustomerInput!
    billing: OrderBillingInput
    items: [OrderLineItemInput]
    metadata: Mixed
}

input DraftOrderInput {
    email: String!
    phone: String
    customer: PeopleInput!
    region_id: ID!
    billing_address: OrderBillingInput
    shipping_address: AddressInput
    items: [OrderLineItemInput!]!
    note: String
    metadata: Mixed
}

input OrderLineItemInput {
    variant_id: ID!
    quantity: Int!
}

input PaymentInput {
    orderId: ID!
    paymentMethod: String!
    creditCard: CreditCardInput
    billing: OrderBillingInput
}

input ProcessPaymentInput {
    order_id: ID!
    payment_token: String! # Token from the payment provider (e.g., Stripe's paymentMethodId)
    payment_provider: String! # e.g., "stripe", "paypal"
}

extend type Mutation @guard {
    # @deprecated(reason: "Use createOrderFromCart instead")
    createOrder(input: OrderInput!): Mixed!
        @field(
            resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\OrderManagementMutation@create"
        )
    createOrderFromCart(input: OrderCartInput!): OrderResult!
        @field(
            resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\OrderManagementMutation@createFromCart"
        )
    createDraftOrder(input: DraftOrderInput!): Order!
        @field(
            resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\DraftOrderManagementMutation@create"
        )
    processOrderPayment(input: ProcessPaymentInput!): PaymentResult!
        @field(
            resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\PaymentManagementMutation@processPayment"
        )
    generateOrderPaymentIntent(id: ID!): GeneratePaymentIntentResult!
        @field(
            resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\PaymentManagementMutation@generatePaymentIntent"
        )
    #createOrderFromCart(input: CartOrderInput!): Mixed!
    #    @field(
    #        resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\OrderManagementMutation@create"
    #    )
    #assignPaymentToOrder(input: PaymentInput!): Mixed!
    #    @field(
    #        resolver: "App\\GraphQL\\Souk\\Mutations\\Orders\\OrderManagementMutation@assignPaymentToOrder"
    #    )
}

extend type Query @guard {
    orders(
        where: _
            @whereConditions(
                columns: [
                    "id"
                    "uuid"
                    "companies_id"
                    "users_id"
                    "user_email"
                    "user_phone"
                    "status"
                ]
            )
        orderBy: _
            @orderBy(columns: ["id", "created_at", "updated_at", "status"])
    ): [Order!]!
        @paginate(
            model: "Kanvas\\Souk\\Orders\\Models\\Order"
            scopes: ["fromCompany", "fromApp", "notDeleted", "filterByUser"]
            defaultCount: 25
        )
}
